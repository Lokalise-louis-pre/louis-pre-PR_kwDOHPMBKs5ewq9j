{"version":3,"file":"components-Editable-Editable-stories-mdx.bb811cd6.iframe.bundle.js","mappings":";AAqOA;;AAGA;AArKA;;AAGA;;;ACDA;AACA;AAMA","sources":["webpack://@lokalise/louis/./src/components/Editable/Editable.stories.mdx","webpack://@lokalise/louis/./src/components/Input/styles.ts"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/louis/louis/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { useArgs } from '@storybook/client-api';\nimport { styled } from '@lokalise/styled';\nimport { typography } from '../../utils/theme';\nimport { Editable } from './Editable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const Template = args => {\n  const {\n    onChange,\n    ...rest\n  } = args;\n  const [_, updateArgs] = useArgs();\n\n  const handleChange = newValue => {\n    updateArgs({\n      value: newValue\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Editable, {\n    onChange: handleChange,\n    ...rest\n  });\n};\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      p: \"p\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Components/Editable\",\n        component: Editable,\n        parameters: {\n          controls: {\n            sort: 'requiredFirst'\n          },\n          docs: {\n            source: {\n              excludeDecorators: true\n            }\n          }\n        },\n        decorators: [Story => {\n          const StoryContent = styled.div`\n\t \t\t\t${typography('body.base.default')};\n\t \t\t\tpadding: 115px 0 0 80px;\n\t \t\t`;\n          return /*#__PURE__*/_jsx(StoryContent, {\n            children: Story()\n          });\n        }]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n        id: \"editable\",\n        children: \"Editable\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#overview\",\n            children: \"Overview\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#figma-design-file\",\n            children: \"Figma Design File\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#props\",\n            children: \"Props\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#examples\",\n            children: \"Examples\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"overview\",\n        children: \"Overview\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"Editable is used for editing inline text by clicking on the text.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm install @lokalise/louis\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"usage\",\n        children: \"Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import { useState } from 'react';\\nimport { Editable } from '@lokalise/louis';\\n\\nexport default () => {\\n\\tconst [value, setValue] = useState();\\n\\treturn <Editable value={value} onChange={setValue} />;\\n};\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"figma-design-file\",\n        children: \"Figma Design File\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Figma Source File | Editable (not yet available in Figma, will be updated)\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"props\",\n        children: \"Props\"\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        of: Editable,\n        sort: \"requiredFirst\"\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"examples\",\n        children: \"Examples\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"default\",\n        children: \"Default\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Default\",\n          args: {\n            value: 'Editable text'\n          },\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"empty-text\",\n        children: \"Empty Text\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Empty Text\",\n          args: {\n            value: '',\n            emptyText: 'This Editable has an empty string as the value',\n            placeholder: 'Enter text'\n          },\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"disabled\",\n        children: \"Disabled\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Disabled\",\n          args: {\n            value: 'Disabled editable text',\n            disabled: true\n          },\n          children: Template.bind({})\n        })\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {\n  value: \"Editable text\"\n};\ndefaultStory.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nexport const emptyText = Template.bind({});\nemptyText.storyName = 'Empty Text';\nemptyText.args = {\n  value: \"\",\n  emptyText: \"This Editable has an empty string as the value\",\n  placeholder: \"Enter text\"\n};\nemptyText.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nexport const disabled = Template.bind({});\ndisabled.storyName = 'Disabled';\ndisabled.args = {\n  value: \"Disabled editable text\",\n  disabled: true\n};\ndisabled.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'Components/Editable',\n  parameters: {\n    controls: {\n      sort: \"requiredFirst\"\n    },\n    docs: {\n      source: {\n        excludeDecorators: true\n      }\n    }\n  },\n  decorators: [Story => {\n    const StoryContent = styled.div`\n\t \t\t\t${typography(\"body.base.default\")};\n\t \t\t\tpadding: 115px 0 0 80px;\n\t \t\t`;\n    return /*#__PURE__*/_jsx(StoryContent, {\n      children: Story()\n    });\n  }],\n  component: Editable,\n  tags: ['stories-mdx'],\n  includeStories: [\"defaultStory\", \"emptyText\", \"disabled\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport type { InputHTMLAttributes } from 'react';\n\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { spacing, value } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\nexport const StyledInput = styled.input.withConfig({ shouldForwardProp: excludeProps(['error']) })<\n\tInputHTMLAttributes<HTMLInputElement> & InputStyleProps\n>`\n\t${withInputFieldStyle};\n\n\tborder: 0;\n\tmin-width: 50px;\n\twidth: 100%;\n\tpadding: 0;\n\tdisplay: block;\n`;\n\nexport const InputIcon = styled.div`\n\tline-height: 1;\n\tfont-size: 0;\n`;\n\ntype InputContainerProps = {\n\tinputSize: InputSizeVariants;\n\thasPrefix?: boolean;\n\thasSuffix?: boolean;\n\tdisabled?: boolean;\n\terror?: boolean;\n};\n\nexport const InputContainer = styled(Flex).withConfig({\n\tshouldForwardProp: excludeProps(['inputSize', 'hasPrefix', 'hasSuffix', 'disabled', 'error']),\n})<FlexProps & InputContainerProps>`\n\t${withInputContainerStyle};\n\t${withInputSizeVariants};\n\n\talign-items: center;\n\tpadding: ${spacing(0, 3)};\n\tcolor: ${value('color.text.input.placeholder')};\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tcolor: ${value('color.border.active')};\n\t}\n\n\t// All items should preserve their width\n\t> * {\n\t\tflex-shrink: 0;\n\t}\n\n\t// Except input\n\t> ${StyledInput} {\n\t\tflex-shrink: 1;\n\t}\n\n\t${modifier(\n\t\t'hasPrefix',\n\t\tcss`\n\t\t\tpadding-left: ${spacing(2)};\n\t\t`,\n\t)};\n\n\t${modifier(\n\t\t'hasSuffix',\n\t\tcss`\n\t\t\tpadding-right: ${spacing(2)};\n\t\t`,\n\t)};\n`;\n"],"names":[],"sourceRoot":""}