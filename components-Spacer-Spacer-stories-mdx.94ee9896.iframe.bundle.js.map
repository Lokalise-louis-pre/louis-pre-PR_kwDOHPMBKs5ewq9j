{"version":3,"file":"components-Spacer-Spacer-stories-mdx.94ee9896.iframe.bundle.js","mappings":";AAqPA;;;;;;;;;;;;;;;;;;AAmBA;AAjLA;;;;;;;;;;;;;;;;;;AAmBA","sources":["webpack://@lokalise/louis/./src/components/Spacer/Spacer.stories.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/louis/louis/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { typography } from '../../utils/theme';\nimport { styled } from '@lokalise/styled';\nimport { Spacer } from './Spacer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const Template = args => {\n  const _components = Object.assign({\n    div: \"div\",\n    span: \"span\"\n  }, _provideComponents());\n\n  const {\n    vertical,\n    horizontal,\n    top,\n    right,\n    bottom,\n    left,\n    ...rest\n  } = args;\n  return /*#__PURE__*/_jsx(Spacer, {\n    vertical: vertical,\n    horizontal: horizontal,\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left,\n    ...rest,\n    children: /*#__PURE__*/_jsx(_components.div, {\n      children: vertical || horizontal ? [/*#__PURE__*/_jsx(_components.span, {\n        children: vertical && `vertical: ${vertical}`\n      }), /*#__PURE__*/_jsx(_components.span, {\n        children: horizontal && `horizontal: ${horizontal}`\n      })] : [/*#__PURE__*/_jsx(_components.span, {\n        children: top && `top: ${top}`\n      }), /*#__PURE__*/_jsxs(_components.span, {\n        children: [left && `left: ${left}`, \"\\xA0 \\xA0\", right && `right: ${right}`]\n      }), /*#__PURE__*/_jsx(_components.span, {\n        children: bottom && `bottom: ${bottom}`\n      })]\n    })\n  });\n};\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      p: \"p\",\n      code: \"code\",\n      strong: \"strong\",\n      h3: \"h3\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Components/Spacer\",\n        component: Spacer,\n        parameters: {\n          controls: {\n            sort: 'requiredFirst'\n          },\n          docs: {\n            source: {\n              excludeDecorators: true\n            }\n          }\n        },\n        decorators: [Story => {\n          const StoryContent = styled.div`\n\t \t\t\t${typography('body.caption.default')};\n\t \t\t\t// styled Spacer\n\t \t\t\t& > div {\n\t \t\t\t\tbackground-color: #fed77c;\n\t \t\t\t\tdisplay: inline-block;\n\t \t\t\t}\n\t \t\t\t// styled content in Spacer\n\t \t\t\t& > div > div {\n\t \t\t\t\tdisplay: flex;\n\t \t\t\t\tflex-direction: column;\n\t \t\t\t\talign-items: center;\n\t \t\t\t\tjustify-content: center;\n\t \t\t\t\ttext-align: center;\n\t \t\t\t\tbackground-color: #eeeeee;\n\t \t\t\t\tcolor: #808080;\n\t \t\t\t\twidth: 100px;\n\t \t\t\t\theight: 100px;\n\t \t\t\t}\n\t \t\t`;\n          return /*#__PURE__*/_jsx(StoryContent, {\n            children: Story()\n          });\n        }]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n        id: \"spacer\",\n        children: \"Spacer\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#overview\",\n            children: \"Overview\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#props\",\n            children: \"Props\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#examples\",\n            children: \"Examples\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"overview\",\n        children: \"Overview\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"Meant for adding space between different components. It allows extracting margins from other components which allows making components more reusable. Also, \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"Spacer\"\n        }), \" allows avoiding creation of custom components that are meant just for adding some margins.\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: /*#__PURE__*/_jsxs(_components.strong, {\n          children: [\"Keep in mind that \", /*#__PURE__*/_jsx(_components.code, {\n            children: \"Spacer\"\n          }), \" should be used only in places where using \", /*#__PURE__*/_jsx(_components.code, {\n            children: \"flex gap\"\n          }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n            children: \"grid gap\"\n          }), \" doesn't make sense.\"]\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm install @lokalise/louis\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"usage\",\n        children: \"Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import { Spacer } from '@lokalise/louis';\\n\\nexport default () => <Spacer>Hello world!</Spacer>;\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"props\",\n        children: \"Props\"\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        of: Spacer,\n        sort: \"requiredFirst\"\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"examples\",\n        children: \"Examples\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"specific-directions\",\n        children: \"Specific Directions\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Specific Directions\",\n          args: {\n            top: 2,\n            right: 4,\n            bottom: 6,\n            left: 8\n          },\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"shorthand\",\n        children: \"Shorthand\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Shorthand\",\n          args: {\n            vertical: 2,\n            horizontal: 8\n          },\n          children: Template.bind({})\n        })\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const specificDirections = Template.bind({});\nspecificDirections.storyName = 'Specific Directions';\nspecificDirections.args = {\n  top: 2,\n  right: 4,\n  bottom: 6,\n  left: 8\n};\nspecificDirections.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    vertical,\\n    horizontal,\\n    top,\\n    right,\\n    bottom,\\n    left,\\n    ...rest\\n  } = args;\\n  return <Spacer vertical={vertical} horizontal={horizontal} top={top} right={right} bottom={bottom} left={left} {...rest}>\\n\t\t\t<div>\\n\t\t\t\t{vertical || horizontal ? [<span>{vertical && `vertical: ${vertical}`}</span>, <span>{horizontal && `horizontal: ${horizontal}`}</span>] : [<span>{top && `top: ${top}`}</span>, <span>\\n\t\t\t\t\t\t\t\t{left && `left: ${left}`}\\n\t\t\t\t\t\t\t\t   \\n\t\t\t\t\t\t\t\t{right && `right: ${right}`}\\n\t\t\t\t\t\t\t</span>, <span>{bottom && `bottom: ${bottom}`}</span>]}\\n\t\t\t</div>\\n\t\t</Spacer>;\\n}'\n  }\n};\nexport const shorthand = Template.bind({});\nshorthand.storyName = 'Shorthand';\nshorthand.args = {\n  vertical: 2,\n  horizontal: 8\n};\nshorthand.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    vertical,\\n    horizontal,\\n    top,\\n    right,\\n    bottom,\\n    left,\\n    ...rest\\n  } = args;\\n  return <Spacer vertical={vertical} horizontal={horizontal} top={top} right={right} bottom={bottom} left={left} {...rest}>\\n\t\t\t<div>\\n\t\t\t\t{vertical || horizontal ? [<span>{vertical && `vertical: ${vertical}`}</span>, <span>{horizontal && `horizontal: ${horizontal}`}</span>] : [<span>{top && `top: ${top}`}</span>, <span>\\n\t\t\t\t\t\t\t\t{left && `left: ${left}`}\\n\t\t\t\t\t\t\t\t   \\n\t\t\t\t\t\t\t\t{right && `right: ${right}`}\\n\t\t\t\t\t\t\t</span>, <span>{bottom && `bottom: ${bottom}`}</span>]}\\n\t\t\t</div>\\n\t\t</Spacer>;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'Components/Spacer',\n  parameters: {\n    controls: {\n      sort: \"requiredFirst\"\n    },\n    docs: {\n      source: {\n        excludeDecorators: true\n      }\n    }\n  },\n  decorators: [Story => {\n    const StoryContent = styled.div`\n\t \t\t\t${typography(\"body.caption.default\")};\n\t \t\t\t// styled Spacer\n\t \t\t\t& > div {\n\t \t\t\t\tbackground-color: #fed77c;\n\t \t\t\t\tdisplay: inline-block;\n\t \t\t\t}\n\t \t\t\t// styled content in Spacer\n\t \t\t\t& > div > div {\n\t \t\t\t\tdisplay: flex;\n\t \t\t\t\tflex-direction: column;\n\t \t\t\t\talign-items: center;\n\t \t\t\t\tjustify-content: center;\n\t \t\t\t\ttext-align: center;\n\t \t\t\t\tbackground-color: #eeeeee;\n\t \t\t\t\tcolor: #808080;\n\t \t\t\t\twidth: 100px;\n\t \t\t\t\theight: 100px;\n\t \t\t\t}\n\t \t\t`;\n    return /*#__PURE__*/_jsx(StoryContent, {\n      children: Story()\n    });\n  }],\n  component: Spacer,\n  tags: ['stories-mdx'],\n  includeStories: [\"specificDirections\", \"shorthand\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":[],"sourceRoot":""}