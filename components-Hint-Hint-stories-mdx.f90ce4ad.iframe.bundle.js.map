{"version":3,"file":"components-Hint-Hint-stories-mdx.f90ce4ad.iframe.bundle.js","mappings":";;;;;AAcA;ACAA;;;AAIA;;;ACmDA;AACA;AAMA;;AC/DA;AAKA;AAKA;AACA;AACA","sources":["webpack://@lokalise/louis/./src/components/Hint/styles.ts","webpack://@lokalise/louis/./src/components/Hint/Hint.stories.mdx","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/Label/styles.tsx"],"sourcesContent":["import { css, excludeProps, styled } from '@lokalise/styled';\n\nimport { spacing, value } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nconst side = '14px';\n\nconst centerPosition = css`\n\tposition: absolute; // Set as \"absolute\" so svg is not affecting line height.\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n\nexport const HintButton = styled.span`\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tvertical-align: baseline;\n\twidth: ${side};\n\tmin-height: ${side};\n\tborder-radius: 50%;\n\tposition: relative; // Necessary so \"icon\" can be positioned in the center\n\tline-height: inherit;\n\n\t&::before {\n\t\tcontent: '\\\\a0'; // This space is necessary to hold line-height, which is necessary so Hint is visually aligned with the text\n\t}\n`;\n\nexport const IconWrapper = styled.span`\n\tdisplay: inline-flex;\n\tcolor: ${value('color.text.disabled')};\n\tfont-size: 16px;\n\t${centerPosition}\n`;\n\nexport const Content = styled(BaseContent)`\n\tfont-size: 14px;\n\tline-height: 20px;\n\tbackground-color: ${value('color.background.surface.default')};\n\tcolor: ${value('color.text.default')};\n\tborder-radius: ${value('radius.tooltip')};\n\tpadding: ${spacing(3, 4)};\n\tborder-color: ${value('color.border.default')};\n\tz-index: ${value('zIndex.tooltip')};\n\ttext-align: start;\n`;\n\nexport const Arrow = styled(BaseArrow).withConfig({ shouldForwardProp: excludeProps(['placement']) })`\n\t&:before {\n\t\tbackground-color: ${value('color.background.surface.default')};\n\t\tborder-color: ${value('color.border.default')};\n\t}\n`;\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/louis/louis/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '@lokalise/styled';\nimport { typography } from '../../utils/theme';\nimport { Input } from '../Input';\nimport { Label } from '../Label';\nimport { Hint } from './Hint';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const StoryContent = styled.div`\n\t${typography('body.base.default')};\n\twidth: 800px;\n\tmargin: 60px 100px;\n`;\nexport const Template = args => /*#__PURE__*/_jsx(Hint, { ...args\n});\nexport const LabelTemplate = args => /*#__PURE__*/_jsx(Label, {\n  text: /*#__PURE__*/_jsxs(_Fragment, {\n    children: [\"Labels sometimes include hints \", /*#__PURE__*/_jsx(Hint, { ...args\n    })]\n  }),\n  children: /*#__PURE__*/_jsx(Input, {})\n});\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      h2: \"h2\",\n      p: \"p\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Components/Hint\",\n        component: Hint,\n        parameters: {\n          controls: {\n            sort: 'requiredFirst'\n          },\n          docs: {\n            source: {\n              excludeDecorators: true\n            }\n          }\n        },\n        argTypes: {\n          width: {\n            control: {\n              type: 'text'\n            }\n          }\n        }\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n        id: \"hint\",\n        children: \"Hint\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#overview\",\n            children: \"Overview\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#figma-design-file\",\n            children: \"Figma Design File\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#props\",\n            children: \"Props\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#examples\",\n            children: \"Examples\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"overview\",\n        children: \"Overview\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"Hint can be used as an icon button to provide additional context and explanations for other UI elements or text.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm install @lokalise/louis\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"usage\",\n        children: \"Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import { Hint } from '@lokalise/louis';\\n\\nexport default () => <Hint>This is a hint.</Hint>;\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"figma-design-file\",\n        children: \"Figma Design File\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Figma Source File | Hint (not yet available in Figma, will be updated)\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"props\",\n        children: \"Props\"\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        of: Hint,\n        sort: \"requiredFirst\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"examples\",\n        children: \"Examples\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Hint\",\n          args: {\n            children: 'This is a hint.'\n          },\n          decorators: [Story => /*#__PURE__*/_jsx(StoryContent, {\n            children: /*#__PURE__*/_jsxs(_Fragment, {\n              children: [\"This could use an explanation \", Story(), \" with some extra context.\"]\n            })\n          })],\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Inside label\",\n          args: {\n            children: 'This is a hint.'\n          },\n          children: LabelTemplate.bind({})\n        })\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const hint = Template.bind({});\nhint.storyName = 'Hint';\nhint.args = {\n  children: \"This is a hint.\"\n};\nhint.parameters = {\n  storySource: {\n    source: 'args => <Hint {...args} />'\n  }\n};\nhint.decorators = [Story => /*#__PURE__*/_jsx(StoryContent, {\n  children: /*#__PURE__*/_jsxs(_Fragment, {\n    children: [\"This could use an explanation \", Story(), \" with some extra context.\"]\n  })\n})];\nexport const insideLabel = LabelTemplate.bind({});\ninsideLabel.storyName = 'Inside label';\ninsideLabel.args = {\n  children: \"This is a hint.\"\n};\ninsideLabel.parameters = {\n  storySource: {\n    source: 'args => <Label text={<>\\n\t\t\t\tLabels sometimes include hints <Hint {...args} />\\n\t\t\t</>}>\\n\t\t<Input />\\n\t</Label>'\n  }\n};\nconst componentMeta = {\n  title: 'Components/Hint',\n  parameters: {\n    controls: {\n      sort: \"requiredFirst\"\n    },\n    docs: {\n      source: {\n        excludeDecorators: true\n      }\n    }\n  },\n  component: Hint,\n  argTypes: {\n    width: {\n      control: {\n        type: \"text\"\n      }\n    }\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"hint\", \"insideLabel\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport type { InputHTMLAttributes } from 'react';\n\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { spacing, value } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\nexport const StyledInput = styled.input.withConfig({ shouldForwardProp: excludeProps(['error']) })<\n\tInputHTMLAttributes<HTMLInputElement> & InputStyleProps\n>`\n\t${withInputFieldStyle};\n\n\tborder: 0;\n\tmin-width: 50px;\n\twidth: 100%;\n\tpadding: 0;\n\tdisplay: block;\n`;\n\nexport const InputIcon = styled.div`\n\tline-height: 1;\n\tfont-size: 0;\n`;\n\ntype InputContainerProps = {\n\tinputSize: InputSizeVariants;\n\thasPrefix?: boolean;\n\thasSuffix?: boolean;\n\tdisabled?: boolean;\n\terror?: boolean;\n};\n\nexport const InputContainer = styled(Flex).withConfig({\n\tshouldForwardProp: excludeProps(['inputSize', 'hasPrefix', 'hasSuffix', 'disabled', 'error']),\n})<FlexProps & InputContainerProps>`\n\t${withInputContainerStyle};\n\t${withInputSizeVariants};\n\n\talign-items: center;\n\tpadding: ${spacing(0, 3)};\n\tcolor: ${value('color.text.input.placeholder')};\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tcolor: ${value('color.border.active')};\n\t}\n\n\t// All items should preserve their width\n\t> * {\n\t\tflex-shrink: 0;\n\t}\n\n\t// Except input\n\t> ${StyledInput} {\n\t\tflex-shrink: 1;\n\t}\n\n\t${modifier(\n\t\t'hasPrefix',\n\t\tcss`\n\t\t\tpadding-left: ${spacing(2)};\n\t\t`,\n\t)};\n\n\t${modifier(\n\t\t'hasSuffix',\n\t\tcss`\n\t\t\tpadding-right: ${spacing(2)};\n\t\t`,\n\t)};\n`;\n","import { css, modifier, styled } from '@lokalise/styled';\n\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport const Container = styled.label<{ $underline: boolean }>`\n\twidth: 100%;\n\tmargin-bottom: 0;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\n\t${modifier(\n\t\t'$underline',\n\t\tcss`\n\t\t\tgap: ${spacing(3)};\n\t\t`,\n\t)}\n`;\n\nexport const LabelText = styled.div<{ $underline: boolean }>`\n\t${typography('body.base.strong')}\n\t${modifier(\n\t\t'$underline',\n\t\tcss`\n\t\t\tpadding-bottom: ${spacing(1)};\n\t\t\tborder-bottom: 1px solid ${value('color.border.light')};\n\t\t`,\n\t)}\n\tcolor: ${value('color.text.default')};\n\tcursor: default;\n`;\n\nexport const LabelDescription = styled.p`\n\tmargin: 0;\n\tpadding: 0;\n\t${typography('body.small.default')}\n\tcolor: ${value('color.text.light.default')};\n`;\n\nexport const AsteriskIcon = styled.span`\n\tcolor: ${value('color.background.action.danger.default')};\n\t&:after {\n\t\tcontent: '*';\n\t}\n`;\n"],"names":[],"sourceRoot":""}